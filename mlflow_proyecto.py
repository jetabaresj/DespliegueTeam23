# -*- coding: utf-8 -*-
"""MlFlow_proyecto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZXftyCppOG9PIrLdaTip3zTVU9zXQA-z
"""

#Librerias a cargar
import pandas as pd
import numpy as np
import mlflow
import mlflow.sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
#Se cargan los datos del repositorio
url = "https://raw.githubusercontent.com/jetabaresj/DespliegueTeam23/refs/heads/main/data/heart_failure_clinical_records_dataset.csv"
df = pd.read_csv(url)
#Se divide el DF en entranamiento y prueba
X = df.drop('DEATH_EVENT', axis=1)
y = df['DEATH_EVENT']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
#Se escalan los datos
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# registre el experimento
experiment = mlflow.set_experiment("Proyecto_Despliegue")
with mlflow.start_run(experiment_id=experiment.experiment_id):
    #Modelo de regresión logístico
    max_iter=1000
    penalty='l2'
    model = LogisticRegression(max_iter=max_iter,penalty=penalty, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    # Registro de los parámetros
    mlflow.log_param("max_iter", max_iter)
    mlflow.log_param("penalty", penalty)
    # Registro el modelo
    mlflow.sklearn.log_model(model, "Regresión logística")
    accuracy = accuracy_score(y_test, y_pred)
    mlflow.log_metric("accuracy", accuracy)
    print(accuracy)